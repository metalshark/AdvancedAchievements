/*
 * This file is generated by jOOQ.
 */
package com.hm.achievement.db.tables;

import com.hm.achievement.db.DefaultSchema;
import com.hm.achievement.db.Keys;
import com.hm.achievement.db.tables.records.TreasuresRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Treasures extends TableImpl<TreasuresRecord> {

	private static final long serialVersionUID = 231012305;

	/**
	 * The reference instance of <code>treasures</code>
	 */
	public static final Treasures TREASURES = new Treasures();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<TreasuresRecord> getRecordType() {
		return TreasuresRecord.class;
	}

	/**
	 * The column <code>treasures.playername</code>.
	 */
	public final TableField<TreasuresRecord, String> PLAYERNAME = createField(DSL.name("playername"),
			org.jooq.impl.SQLDataType.CHAR(36), this, "");

	/**
	 * The column <code>treasures.treasures</code>.
	 */
	public final TableField<TreasuresRecord, Long> TREASURES_ = createField(DSL.name("treasures"),
			org.jooq.impl.SQLDataType.BIGINT, this, "");

	/**
	 * Create a <code>treasures</code> table reference
	 */
	public Treasures() {
		this(DSL.name("treasures"), null);
	}

	/**
	 * Create an aliased <code>treasures</code> table reference
	 */
	public Treasures(String alias) {
		this(DSL.name(alias), TREASURES);
	}

	/**
	 * Create an aliased <code>treasures</code> table reference
	 */
	public Treasures(Name alias) {
		this(alias, TREASURES);
	}

	private Treasures(Name alias, Table<TreasuresRecord> aliased) {
		this(alias, aliased, null);
	}

	private Treasures(Name alias, Table<TreasuresRecord> aliased, Field<?>[] parameters) {
		super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
	}

	public <O extends Record> Treasures(Table<O> child, ForeignKey<O, TreasuresRecord> key) {
		super(child, key, TREASURES);
	}

	@Override
	public Schema getSchema() {
		return DefaultSchema.DEFAULT_SCHEMA;
	}

	@Override
	public UniqueKey<TreasuresRecord> getPrimaryKey() {
		return Keys.PK_TREASURES;
	}

	@Override
	public List<UniqueKey<TreasuresRecord>> getKeys() {
		return Arrays.<UniqueKey<TreasuresRecord>> asList(Keys.PK_TREASURES);
	}

	@Override
	public Treasures as(String alias) {
		return new Treasures(DSL.name(alias), this);
	}

	@Override
	public Treasures as(Name alias) {
		return new Treasures(alias, this);
	}

	/**
	 * Rename this table
	 */
	@Override
	public Treasures rename(String name) {
		return new Treasures(DSL.name(name), null);
	}

	/**
	 * Rename this table
	 */
	@Override
	public Treasures rename(Name name) {
		return new Treasures(name, null);
	}

	// -------------------------------------------------------------------------
	// Row2 type methods
	// -------------------------------------------------------------------------

	@Override
	public Row2<String, Long> fieldsRow() {
		return (Row2) super.fieldsRow();
	}
}
