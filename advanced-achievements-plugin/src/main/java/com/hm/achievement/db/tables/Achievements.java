/*
 * This file is generated by jOOQ.
 */
package com.hm.achievement.db.tables;

import com.hm.achievement.db.*;
import com.hm.achievement.db.tables.records.AchievementsRecord;

import java.sql.Timestamp;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Achievements extends TableImpl<AchievementsRecord> {

	private static final long serialVersionUID = 59510576;

	/**
	 * The reference instance of <code>achievements</code>
	 */
	public static final Achievements ACHIEVEMENTS = new Achievements();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<AchievementsRecord> getRecordType() {
		return AchievementsRecord.class;
	}

	/**
	 * The column <code>achievements.playername</code>.
	 */
	public final TableField<AchievementsRecord, String> PLAYERNAME = createField(DSL.name("playername"),
			org.jooq.impl.SQLDataType.CHAR(36), this, "");

	/**
	 * The convenience column <code>achievements.playername</code>.
	 */
	public final TableField<AchievementsRecord, UUID> PLAYERUUID = createField(DSL.name("playername"),
			SQLDataType.CHAR(36).asConvertedDataType(new StringToUUIDConverter()), this, "");

	/**
	 * The column <code>achievements.achievement</code>.
	 */
	public final TableField<AchievementsRecord, String> ACHIEVEMENT = createField(DSL.name("achievement"),
			org.jooq.impl.SQLDataType.VARCHAR(64), this, "");

	/**
	 * The column <code>achievements.description</code>.
	 */
	public final TableField<AchievementsRecord, String> DESCRIPTION = createField(DSL.name("description"),
			org.jooq.impl.SQLDataType.VARCHAR(128), this, "");

	/**
	 * The column <code>achievements.date</code>.
	 */
	public final TableField<AchievementsRecord, LocalDateTime> DATE = createField(DSL.name("date"),
			org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

	/**
	 * The convenience column <code>achievements.timestamp</code>.
	 */
	public final TableField<AchievementsRecord, Long> EPOCHMILLI = createField(DSL.name("date"),
		org.jooq.impl.SQLDataType.LOCALDATETIME.asConvertedDataType(new LocalDateTimeToEpochMilliConverter()), this, "");

	/**
	 * The convenience column <code>achievements.timestamp</code>.
	 */
	public final TableField<AchievementsRecord, Timestamp> TIMESTAMP = createField(DSL.name("date"),
		org.jooq.impl.SQLDataType.LOCALDATETIME.asConvertedDataType(new LocalDateTimeToTimestampConverter()), this, "");

	/**
	 * Create a <code>achievements</code> table reference
	 */
	public Achievements() {
		this(DSL.name("achievements"), null);
	}

	/**
	 * Create an aliased <code>achievements</code> table reference
	 */
	public Achievements(String alias) {
		this(DSL.name(alias), ACHIEVEMENTS);
	}

	/**
	 * Create an aliased <code>achievements</code> table reference
	 */
	public Achievements(Name alias) {
		this(alias, ACHIEVEMENTS);
	}

	private Achievements(Name alias, Table<AchievementsRecord> aliased) {
		this(alias, aliased, null);
	}

	private Achievements(Name alias, Table<AchievementsRecord> aliased, Field<?>[] parameters) {
		super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
	}

	public <O extends Record> Achievements(Table<O> child, ForeignKey<O, AchievementsRecord> key) {
		super(child, key, ACHIEVEMENTS);
	}

	@Override
	public Schema getSchema() {
		return DefaultSchema.DEFAULT_SCHEMA;
	}

	@Override
	public UniqueKey<AchievementsRecord> getPrimaryKey() {
		return Keys.PK_ACHIEVEMENTS;
	}

	@Override
	public List<UniqueKey<AchievementsRecord>> getKeys() {
		return Arrays.<UniqueKey<AchievementsRecord>> asList(Keys.PK_ACHIEVEMENTS);
	}

	@Override
	public Achievements as(String alias) {
		return new Achievements(DSL.name(alias), this);
	}

	@Override
	public Achievements as(Name alias) {
		return new Achievements(alias, this);
	}

	/**
	 * Rename this table
	 */
	@Override
	public Achievements rename(String name) {
		return new Achievements(DSL.name(name), null);
	}

	/**
	 * Rename this table
	 */
	@Override
	public Achievements rename(Name name) {
		return new Achievements(name, null);
	}

	// -------------------------------------------------------------------------
	// Row4 type methods
	// -------------------------------------------------------------------------

	@Override
	public Row4<String, String, String, LocalDateTime> fieldsRow() {
		return (Row4) super.fieldsRow();
	}
}
