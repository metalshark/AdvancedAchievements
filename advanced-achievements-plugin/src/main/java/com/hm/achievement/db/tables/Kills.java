/*
 * This file is generated by jOOQ.
 */
package com.hm.achievement.db.tables;

import com.hm.achievement.db.DefaultSchema;
import com.hm.achievement.db.Keys;
import com.hm.achievement.db.tables.records.KillsRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Kills extends TableImpl<KillsRecord> {

	private static final long serialVersionUID = 638420964;

	/**
	 * The reference instance of <code>kills</code>
	 */
	public static final Kills KILLS = new Kills();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<KillsRecord> getRecordType() {
		return KillsRecord.class;
	}

	/**
	 * The column <code>kills.playername</code>.
	 */
	public final TableField<KillsRecord, String> PLAYERNAME = createField(DSL.name("playername"),
			org.jooq.impl.SQLDataType.CHAR(36), this, "");

	/**
	 * The column <code>kills.mobname</code>.
	 */
	public final TableField<KillsRecord, String> MOBNAME = createField(DSL.name("mobname"),
			org.jooq.impl.SQLDataType.VARCHAR(191), this, "");

	/**
	 * The column <code>kills.kills</code>.
	 */
	public final TableField<KillsRecord, Integer> KILLS_ = createField(DSL.name("kills"), org.jooq.impl.SQLDataType.INTEGER,
			this, "");

	/**
	 * Create a <code>kills</code> table reference
	 */
	public Kills() {
		this(DSL.name("kills"), null);
	}

	/**
	 * Create an aliased <code>kills</code> table reference
	 */
	public Kills(String alias) {
		this(DSL.name(alias), KILLS);
	}

	/**
	 * Create an aliased <code>kills</code> table reference
	 */
	public Kills(Name alias) {
		this(alias, KILLS);
	}

	private Kills(Name alias, Table<KillsRecord> aliased) {
		this(alias, aliased, null);
	}

	private Kills(Name alias, Table<KillsRecord> aliased, Field<?>[] parameters) {
		super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
	}

	public <O extends Record> Kills(Table<O> child, ForeignKey<O, KillsRecord> key) {
		super(child, key, KILLS);
	}

	@Override
	public Schema getSchema() {
		return DefaultSchema.DEFAULT_SCHEMA;
	}

	@Override
	public UniqueKey<KillsRecord> getPrimaryKey() {
		return Keys.PK_KILLS;
	}

	@Override
	public List<UniqueKey<KillsRecord>> getKeys() {
		return Arrays.<UniqueKey<KillsRecord>> asList(Keys.PK_KILLS);
	}

	@Override
	public Kills as(String alias) {
		return new Kills(DSL.name(alias), this);
	}

	@Override
	public Kills as(Name alias) {
		return new Kills(alias, this);
	}

	/**
	 * Rename this table
	 */
	@Override
	public Kills rename(String name) {
		return new Kills(DSL.name(name), null);
	}

	/**
	 * Rename this table
	 */
	@Override
	public Kills rename(Name name) {
		return new Kills(name, null);
	}

	// -------------------------------------------------------------------------
	// Row3 type methods
	// -------------------------------------------------------------------------

	@Override
	public Row3<String, String, Integer> fieldsRow() {
		return (Row3) super.fieldsRow();
	}
}
