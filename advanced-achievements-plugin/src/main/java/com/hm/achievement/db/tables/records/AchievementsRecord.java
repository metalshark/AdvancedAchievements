/*
 * This file is generated by jOOQ.
 */
package com.hm.achievement.db.tables.records;

import com.hm.achievement.db.tables.Achievements;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AchievementsRecord extends UpdatableRecordImpl<AchievementsRecord>
		implements Record4<String, String, String, LocalDateTime> {

	private static final long serialVersionUID = 703129472;

	/**
	 * Setter for <code>achievements.playername</code>.
	 */
	public void setPlayername(String value) {
		set(0, value);
	}

	/**
	 * Getter for <code>achievements.playername</code>.
	 */
	public String getPlayername() {
		return (String) get(0);
	}

	/**
	 * Setter for <code>achievements.achievement</code>.
	 */
	public void setAchievement(String value) {
		set(1, value);
	}

	/**
	 * Getter for <code>achievements.achievement</code>.
	 */
	public String getAchievement() {
		return (String) get(1);
	}

	/**
	 * Setter for <code>achievements.description</code>.
	 */
	public void setDescription(String value) {
		set(2, value);
	}

	/**
	 * Getter for <code>achievements.description</code>.
	 */
	public String getDescription() {
		return (String) get(2);
	}

	/**
	 * Setter for <code>achievements.date</code>.
	 */
	public void setDate(LocalDateTime value) {
		set(3, value);
	}

	/**
	 * Getter for <code>achievements.date</code>.
	 */
	public LocalDateTime getDate() {
		return (LocalDateTime) get(3);
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------

	@Override
	public Record2<String, String> key() {
		return (Record2) super.key();
	}

	// -------------------------------------------------------------------------
	// Record4 type implementation
	// -------------------------------------------------------------------------

	@Override
	public Row4<String, String, String, LocalDateTime> fieldsRow() {
		return (Row4) super.fieldsRow();
	}

	@Override
	public Row4<String, String, String, LocalDateTime> valuesRow() {
		return (Row4) super.valuesRow();
	}

	@Override
	public Field<String> field1() {
		return Achievements.ACHIEVEMENTS.PLAYERNAME;
	}

	@Override
	public Field<String> field2() {
		return Achievements.ACHIEVEMENTS.ACHIEVEMENT;
	}

	@Override
	public Field<String> field3() {
		return Achievements.ACHIEVEMENTS.DESCRIPTION;
	}

	@Override
	public Field<LocalDateTime> field4() {
		return Achievements.ACHIEVEMENTS.DATE;
	}

	@Override
	public String component1() {
		return getPlayername();
	}

	@Override
	public String component2() {
		return getAchievement();
	}

	@Override
	public String component3() {
		return getDescription();
	}

	@Override
	public LocalDateTime component4() {
		return getDate();
	}

	@Override
	public String value1() {
		return getPlayername();
	}

	@Override
	public String value2() {
		return getAchievement();
	}

	@Override
	public String value3() {
		return getDescription();
	}

	@Override
	public LocalDateTime value4() {
		return getDate();
	}

	@Override
	public AchievementsRecord value1(String value) {
		setPlayername(value);
		return this;
	}

	@Override
	public AchievementsRecord value2(String value) {
		setAchievement(value);
		return this;
	}

	@Override
	public AchievementsRecord value3(String value) {
		setDescription(value);
		return this;
	}

	@Override
	public AchievementsRecord value4(LocalDateTime value) {
		setDate(value);
		return this;
	}

	@Override
	public AchievementsRecord values(String value1, String value2, String value3, LocalDateTime value4) {
		value1(value1);
		value2(value2);
		value3(value3);
		value4(value4);
		return this;
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Create a detached AchievementsRecord
	 */
	public AchievementsRecord() {
		super(Achievements.ACHIEVEMENTS);
	}

	/**
	 * Create a detached, initialised AchievementsRecord
	 */
	public AchievementsRecord(String playername, String achievement, String description, LocalDateTime date) {
		super(Achievements.ACHIEVEMENTS);

		set(0, playername);
		set(1, achievement);
		set(2, description);
		set(3, date);
	}
}
