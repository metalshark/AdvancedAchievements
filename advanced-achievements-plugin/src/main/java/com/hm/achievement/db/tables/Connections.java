/*
 * This file is generated by jOOQ.
 */
package com.hm.achievement.db.tables;

import com.hm.achievement.db.DefaultSchema;
import com.hm.achievement.db.Keys;
import com.hm.achievement.db.StringToUUIDConverter;
import com.hm.achievement.db.tables.records.ConnectionsRecord;

import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Connections extends TableImpl<ConnectionsRecord> {

	private static final long serialVersionUID = -1508502223;

	/**
	 * The reference instance of <code>connections</code>
	 */
	public static final Connections CONNECTIONS = new Connections();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<ConnectionsRecord> getRecordType() {
		return ConnectionsRecord.class;
	}

	/**
	 * The column <code>connections.playername</code>.
	 */
	public final TableField<ConnectionsRecord, String> PLAYERNAME = createField(DSL.name("playername"),
			org.jooq.impl.SQLDataType.CHAR(36), this, "");

	/**
	 * The convenience column <code>achievements.playername</code>.
	 */
	public final TableField<ConnectionsRecord, UUID> PLAYERUUID = createField(DSL.name("playername"),
			org.jooq.impl.SQLDataType.CHAR(36).asConvertedDataType(new StringToUUIDConverter()), this, "");

	/**
	 * The column <code>connections.connections</code>.
	 */
	public final TableField<ConnectionsRecord, Integer> CONNECTIONS_ = createField(DSL.name("connections"),
			org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>connections.date</code>.
	 */
	public final TableField<ConnectionsRecord, String> DATE = createField(DSL.name("date"),
			org.jooq.impl.SQLDataType.VARCHAR(10), this, "");

	/**
	 * Create a <code>connections</code> table reference
	 */
	public Connections() {
		this(DSL.name("connections"), null);
	}

	/**
	 * Create an aliased <code>connections</code> table reference
	 */
	public Connections(String alias) {
		this(DSL.name(alias), CONNECTIONS);
	}

	/**
	 * Create an aliased <code>connections</code> table reference
	 */
	public Connections(Name alias) {
		this(alias, CONNECTIONS);
	}

	private Connections(Name alias, Table<ConnectionsRecord> aliased) {
		this(alias, aliased, null);
	}

	private Connections(Name alias, Table<ConnectionsRecord> aliased, Field<?>[] parameters) {
		super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
	}

	public <O extends Record> Connections(Table<O> child, ForeignKey<O, ConnectionsRecord> key) {
		super(child, key, CONNECTIONS);
	}

	@Override
	public Schema getSchema() {
		return DefaultSchema.DEFAULT_SCHEMA;
	}

	@Override
	public UniqueKey<ConnectionsRecord> getPrimaryKey() {
		return Keys.PK_CONNECTIONS;
	}

	@Override
	public List<UniqueKey<ConnectionsRecord>> getKeys() {
		return Arrays.<UniqueKey<ConnectionsRecord>> asList(Keys.PK_CONNECTIONS);
	}

	@Override
	public Connections as(String alias) {
		return new Connections(DSL.name(alias), this);
	}

	@Override
	public Connections as(Name alias) {
		return new Connections(alias, this);
	}

	/**
	 * Rename this table
	 */
	@Override
	public Connections rename(String name) {
		return new Connections(DSL.name(name), null);
	}

	/**
	 * Rename this table
	 */
	@Override
	public Connections rename(Name name) {
		return new Connections(name, null);
	}

	// -------------------------------------------------------------------------
	// Row3 type methods
	// -------------------------------------------------------------------------

	@Override
	public Row3<String, Integer, String> fieldsRow() {
		return (Row3) super.fieldsRow();
	}
}
