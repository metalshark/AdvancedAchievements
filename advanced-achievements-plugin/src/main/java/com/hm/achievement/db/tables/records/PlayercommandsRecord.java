/*
 * This file is generated by jOOQ.
 */
package com.hm.achievement.db.tables.records;

import com.hm.achievement.db.tables.Playercommands;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PlayercommandsRecord extends UpdatableRecordImpl<PlayercommandsRecord>
		implements Record3<String, String, Integer> {

	private static final long serialVersionUID = 1902310860;

	/**
	 * Setter for <code>playercommands.playername</code>.
	 */
	public void setPlayername(String value) {
		set(0, value);
	}

	/**
	 * Getter for <code>playercommands.playername</code>.
	 */
	public String getPlayername() {
		return (String) get(0);
	}

	/**
	 * Setter for <code>playercommands.command</code>.
	 */
	public void setCommand(String value) {
		set(1, value);
	}

	/**
	 * Getter for <code>playercommands.command</code>.
	 */
	public String getCommand() {
		return (String) get(1);
	}

	/**
	 * Setter for <code>playercommands.playercommands</code>.
	 */
	public void setPlayercommands(Integer value) {
		set(2, value);
	}

	/**
	 * Getter for <code>playercommands.playercommands</code>.
	 */
	public Integer getPlayercommands() {
		return (Integer) get(2);
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------

	@Override
	public Record2<String, String> key() {
		return (Record2) super.key();
	}

	// -------------------------------------------------------------------------
	// Record3 type implementation
	// -------------------------------------------------------------------------

	@Override
	public Row3<String, String, Integer> fieldsRow() {
		return (Row3) super.fieldsRow();
	}

	@Override
	public Row3<String, String, Integer> valuesRow() {
		return (Row3) super.valuesRow();
	}

	@Override
	public Field<String> field1() {
		return Playercommands.PLAYERCOMMANDS.PLAYERNAME;
	}

	@Override
	public Field<String> field2() {
		return Playercommands.PLAYERCOMMANDS.COMMAND;
	}

	@Override
	public Field<Integer> field3() {
		return Playercommands.PLAYERCOMMANDS.PLAYERCOMMANDS_;
	}

	@Override
	public String component1() {
		return getPlayername();
	}

	@Override
	public String component2() {
		return getCommand();
	}

	@Override
	public Integer component3() {
		return getPlayercommands();
	}

	@Override
	public String value1() {
		return getPlayername();
	}

	@Override
	public String value2() {
		return getCommand();
	}

	@Override
	public Integer value3() {
		return getPlayercommands();
	}

	@Override
	public PlayercommandsRecord value1(String value) {
		setPlayername(value);
		return this;
	}

	@Override
	public PlayercommandsRecord value2(String value) {
		setCommand(value);
		return this;
	}

	@Override
	public PlayercommandsRecord value3(Integer value) {
		setPlayercommands(value);
		return this;
	}

	@Override
	public PlayercommandsRecord values(String value1, String value2, Integer value3) {
		value1(value1);
		value2(value2);
		value3(value3);
		return this;
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Create a detached PlayercommandsRecord
	 */
	public PlayercommandsRecord() {
		super(Playercommands.PLAYERCOMMANDS);
	}

	/**
	 * Create a detached, initialised PlayercommandsRecord
	 */
	public PlayercommandsRecord(String playername, String command, Integer playercommands) {
		super(Playercommands.PLAYERCOMMANDS);

		set(0, playername);
		set(1, command);
		set(2, playercommands);
	}
}
